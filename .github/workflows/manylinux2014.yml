name: manylinux2014

#on:
#  push:
#    branches:
#    - master

on: [push]

env:
  BUILD_TYPE: Release
  DEV_MODE: ON   
  
jobs:
  prepare:
    name: Make environment variables available to the rest of the workflow
    runs-on: ubuntu-latest
    outputs:
        params: ${{ steps.env-vars.outputs.params }}
    steps:
    - name: install jq
      run: pip install jq
    - id: env-vars
      name: Output environment variables
      run: echo "::set-output name=params::$(echo $(jq -n 'env'))"

  build-library:
    runs-on: ubuntu-latest
    needs: [ prepare ]
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.9", "3.10"]

    container: k0tb9g9m0t/manylinux-bazel-2014

    steps:    
    - uses: actions/checkout@v2

    - name: Set env
      run: |
        export PYTHON_SHORT_VERSION=$(echo '${{ matrix.PYTHON_VERSION }}' | tr -d '.')
        echo "PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION}" >> $GITHUB_ENV 
        export PYTHON_PATH=/opt/python/cp${PYTHON_SHORT_VERSION}-cp$(if [[ $PYTHON_SHORT_VERSION =~ ^3[67]$ ]]; then echo $PYTHON_SHORT_VERSION'm';else echo $PYTHON_SHORT_VERSION; fi )
        export PATH=$PYTHON_PATH:$PYTHON_PATH/bin:$PATH
        echo "PYTHON_PATH=${PYTHON_PATH}" >> $GITHUB_ENV 
        echo "PATH=${PATH}" >> $GITHUB_ENV 
        
    - name: Install system packages 
      run: yum install -y ninja-build python3-pip python3-devel 

    - name: Install conan dependencies
      run: |
        pip3 install --no-cache-dir conan
        conan profile new default --detect --force
        conan profile new emscripten-module
        conan profile update settings.compiler=clang emscripten-module
        conan profile update settings.compiler.version=15 emscripten-module
        conan profile update settings.compiler.libcxx=libc++ emscripten-module
        conan profile update settings.arch=wasm emscripten-module
        conan profile update settings.os=Emscripten emscripten-module
        echo -e 'LDFLAGS=--no-entry -s STANDALONE_WASM -s PURE_WASI=1 -s ABORTING_MALLOC=0 -s EXPORTED_FUNCTIONS=['_malloc'] -s ERROR_ON_UNDEFINED_SYMBOLS=0\n[tool_requires]\nemsdk/3.1.7' >> "${HOME}/.conan/profiles/emscripten-module"
        conan remote add cyberduckninja http://conan.cyberduckninja.com:9300
        conan install -if build . --build -s build_type=${{ fromJson(needs.prepare.outputs.params).BUILD_TYPE }}
          
    - name: Build library 
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ fromJson(needs.prepare.outputs.params).BUILD_TYPE }} -DDEV_MODE=${{ fromJson(needs.prepare.outputs.params).DEV_MODE }} -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DPython3_INCLUDE_DIRS=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DPython3_LIBRARIES=$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))") -DPython3_EXECUTABLE=${PYTHON_PATH}/bin/python
        cmake --build .  --parallel 
      working-directory: build/
      
    - name: Install test packages
      run: pip3 install --no-cache-dir pytest

    - name: Run cmake tests
      run: ctest -V -C
      working-directory: build/
      
    - name: Run pytest 
      run: pytest
      working-directory: build/apps/duck_charmer
        
    - name: Save library
      uses: actions/upload-artifact@v3
      with: 
        path: build/apps/duck_charmer/duck_charmer*.so
        name: duck-charmer-lib-${{ matrix.PYTHON_VERSION }}
  
  build-wheel:
    runs-on: ubuntu-latest
 
    needs: [build-library]
 
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.9", "3.10"]

    container: k0tb9g9m0t/manylinux-bazel-2014
    
    steps: 
    
    - name: Set env
      run: |
        export PYTHON_SHORT_VERSION=$(echo '${{ matrix.PYTHON_VERSION }}' | tr -d '.')
        echo "PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION}" >> $GITHUB_ENV 
        export PYTHON_PATH=/opt/python/cp${PYTHON_SHORT_VERSION}-cp$(if [[ $PYTHON_SHORT_VERSION =~ ^3[67]$ ]]; then echo $PYTHON_SHORT_VERSION'm';else echo $PYTHON_SHORT_VERSION; fi )
        export PATH=$PYTHON_PATH:$PYTHON_PATH/bin:$PATH
        echo "PYTHON_PATH=${PYTHON_PATH}" >> $GITHUB_ENV 
        echo "PATH=${PATH}" >> $GITHUB_ENV 
        
    - uses: actions/checkout@v2
    
    - name: Create package dir
      run: |
        mkdir duck_charmer
        touch duck_charmer/__init__.py    
    
    - uses: actions/download-artifact@v2
      with: 
        name: duck-charmer-lib-${{ matrix.PYTHON_VERSION }}
        path: duck_charmer
        
    - name: Install system packages 
      run: yum install -y python3-pip 
      
    - name: Build wheel
      run: |
        echo $PATH
        pip3 install wheel setuptools cmake ninja
        python3 -m pip wheel --verbose . -w wheelhouse_dirty
        auditwheel repair wheelhouse_dirty/duck_charmer*.whl --plat manylinux2014_x86_64 -w wheelhouse

    - name: Save wheel
      uses: actions/upload-artifact@v3
      with: 
        path: wheelhouse/duck_charmer*.whl
        name: duck_charmer-whl-${{ matrix.PYTHON_VERSION }}
        
  test-wheel:
    runs-on: ubuntu-latest
    
    needs: [build-wheel]
    
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.9", "3.10"]

    container: k0tb9g9m0t/manylinux-bazel-2014

    steps: 
    - name: Set env
      run: |
        export PYTHON_SHORT_VERSION=$(echo '${{ matrix.PYTHON_VERSION }}' | tr -d '.')
        echo "PYTHON_SHORT_VERSION=${PYTHON_SHORT_VERSION}" >> $GITHUB_ENV 
        export PYTHON_PATH=/opt/python/cp${PYTHON_SHORT_VERSION}-cp$(if [[ $PYTHON_SHORT_VERSION =~ ^3[67]$ ]]; then echo $PYTHON_SHORT_VERSION'm';else echo $PYTHON_SHORT_VERSION; fi )
        export PATH=$PYTHON_PATH:$PYTHON_PATH/bin:$PATH
        echo "PYTHON_PATH=${PYTHON_PATH}" >> $GITHUB_ENV 
        echo "PATH=${PATH}" >> $GITHUB_ENV 
        
    - name: Create test folder
      run: mkdir -p /tests
      
    - uses: actions/download-artifact@v2
      with: 
        name: duck_charmer-whl-${{ matrix.PYTHON_VERSION }}
        path: /tests
      
    - name: Install system packages 
      run: yum install -y python3-pip 
      
    - name: Install python packages
      run: pip3 install --no-cache-dir pytest wheel-inspect
    
    - name: Get wheel info
      run: wheel2json duck_charmer-*.whl
      working-directory: /tests

    - name: Install wheel 
      run: |
        python3 -m pip install --no-index --find-links . duck_charmer-*.whl    
      working-directory: /tests
      
  publish-wheel:
    runs-on: ubuntu-latest
    needs: [test-wheel]

    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.9", "3.10"]
    
    container: apihackers/twine
    
    steps:
    - name: Create app folder
      run: mkdir -p /app
      
    - uses: actions/download-artifact@v2
      with: 
        name: duck_charmer-whl-${{ matrix.PYTHON_VERSION }}
        path: /app

    - name: Publish wheels
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload --skip-existing *
      working-directory: /app
      
  install-package:
    runs-on: ubuntu-latest
    needs: [publish-wheel]

    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.9", "3.10"]

    container: ubuntu:20.04
    env: 
      DEBIAN_FRONTEND: NONINTERACTIVE
    steps:
    
    - name: Install system packages 
      run: |
        apt update -y
        apt install -y software-properties-common        
        
    - name: Install python
      run: |
        add-apt-repository ppa:deadsnakes/ppa -y
        apt update -y
        apt install -y curl python${{ matrix.PYTHON_VERSION }} python${{ matrix.PYTHON_VERSION }}-distutils
        curl -sS https://bootstrap.pypa.io/get-pip.py | python${{ matrix.PYTHON_VERSION }}

    - name: Download package 
      run: python${{ matrix.PYTHON_VERSION }} -m pip install duck_charmer
          
          
        

